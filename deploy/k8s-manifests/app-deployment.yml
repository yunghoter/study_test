apiVersion: apps/v1
kind: Deployment
metadata:
  name: college-schedule-app
  labels:
    app: college-schedule-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: college-schedule-app
  template:
    metadata:
      labels:
        app: college-schedule-app
    spec:
      imagePullSecrets:
      - name: ghcr-secret
      containers:
      - name: app
        image: ghcr.io/{{GITHUB_OWNER}}/college-schedule-app:{{IMAGE_TAG}}
        imagePullPolicy: Always  # Завжди завантажувати образ
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/college-db?sslmode=disable"
        - name: SPRING_DATASOURCE_USERNAME
          value: "postgres"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "postgres"
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: "update"
        - name: SERVER_PORT
          value: "8080"
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # HTTP probe на корінь застосунку
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            httpHeaders:
            - name: Accept
              value: "text/html"
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            httpHeaders:
            - name: Accept
              value: "text/html"
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command: 
        - sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
---
apiVersion: v1
kind: Service
metadata:
  name: college-schedule-app
  labels:
    app: college-schedule-app
spec:
  selector:
    app: college-schedule-app
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  type: LoadBalancer
